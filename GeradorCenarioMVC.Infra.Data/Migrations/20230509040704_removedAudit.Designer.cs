// <auto-generated />
using System;
using GeradorCenarioMVC.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeradorCenarioMVC.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230509040704_removedAudit")]
    partial class removedAudit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("ConteudoSequence");

            modelBuilder.HasSequence("SecaoWebSequence");

            modelBuilder.Entity("CampanhaGrupo", b =>
                {
                    b.Property<int>("CampanhasId")
                        .HasColumnType("int");

                    b.Property<int>("GruposId")
                        .HasColumnType("int");

                    b.HasKey("CampanhasId", "GruposId");

                    b.HasIndex("GruposId");

                    b.ToTable("CampanhaGrupo");
                });

            modelBuilder.Entity("CampanhaNpc", b =>
                {
                    b.Property<int>("CampanhasId")
                        .HasColumnType("int");

                    b.Property<int>("NpcsId")
                        .HasColumnType("int");

                    b.HasKey("CampanhasId", "NpcsId");

                    b.HasIndex("NpcsId");

                    b.ToTable("CampanhaNpc");
                });

            modelBuilder.Entity("CampanhaPc", b =>
                {
                    b.Property<int>("CampanhasId")
                        .HasColumnType("int");

                    b.Property<int>("PcsId")
                        .HasColumnType("int");

                    b.HasKey("CampanhasId", "PcsId");

                    b.HasIndex("PcsId");

                    b.ToTable("CampanhaPc");
                });

            modelBuilder.Entity("CategoriaMateriaMateria", b =>
                {
                    b.Property<int>("CategoriasMateriaId")
                        .HasColumnType("int");

                    b.Property<int>("MateriasId")
                        .HasColumnType("int");

                    b.HasKey("CategoriasMateriaId", "MateriasId");

                    b.HasIndex("MateriasId");

                    b.ToTable("CategoriaMateriaMateria");
                });

            modelBuilder.Entity("CenarioCenarioGenero", b =>
                {
                    b.Property<int>("CenarioGenerosId")
                        .HasColumnType("int");

                    b.Property<int>("CenariosId")
                        .HasColumnType("int");

                    b.HasKey("CenarioGenerosId", "CenariosId");

                    b.HasIndex("CenariosId");

                    b.ToTable("CenarioCenarioGenero");
                });

            modelBuilder.Entity("CenarioMateria", b =>
                {
                    b.Property<int>("CenariosId")
                        .HasColumnType("int");

                    b.Property<int>("MateriasId")
                        .HasColumnType("int");

                    b.HasKey("CenariosId", "MateriasId");

                    b.HasIndex("MateriasId");

                    b.ToTable("CenarioMateria");
                });

            modelBuilder.Entity("CenarioTag", b =>
                {
                    b.Property<int>("CenariosId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("CenariosId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CenarioTag");
                });

            modelBuilder.Entity("ConquistaNpc", b =>
                {
                    b.Property<int>("ConquistasId")
                        .HasColumnType("int");

                    b.Property<int>("NpcsId")
                        .HasColumnType("int");

                    b.HasKey("ConquistasId", "NpcsId");

                    b.HasIndex("NpcsId");

                    b.ToTable("ConquistaNpc");
                });

            modelBuilder.Entity("ConquistaPc", b =>
                {
                    b.Property<int>("ConquistasId")
                        .HasColumnType("int");

                    b.Property<int>("PcsId")
                        .HasColumnType("int");

                    b.HasKey("ConquistasId", "PcsId");

                    b.HasIndex("PcsId");

                    b.ToTable("ConquistaPc");
                });

            modelBuilder.Entity("EnredoPc", b =>
                {
                    b.Property<int>("EnredosId")
                        .HasColumnType("int");

                    b.Property<int>("PcsId")
                        .HasColumnType("int");

                    b.HasKey("EnredosId", "PcsId");

                    b.HasIndex("PcsId");

                    b.ToTable("EnredoPc");
                });

            modelBuilder.Entity("GaleriaImagem", b =>
                {
                    b.Property<int>("GaleriasId")
                        .HasColumnType("int");

                    b.Property<int>("ImagensId")
                        .HasColumnType("int");

                    b.HasKey("GaleriasId", "ImagensId");

                    b.HasIndex("ImagensId");

                    b.ToTable("GaleriaImagem");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Campanha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CenarioId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("int");

                    b.Property<string>("Introducao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CenarioId");

                    b.HasIndex("ImagemId");

                    b.ToTable("Campanhas");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.CategoriaMateria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CategoriasMateria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Cenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CenarioOficial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DataCenario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GaleriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Peso")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.Property<bool?>("Privado")
                        .HasColumnType("bit");

                    b.Property<string>("SistemaOficial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GaleriaId");

                    b.ToTable("Cenarios");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.CenarioGenero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CenarioGeneros");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Conquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TipoConquistaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TipoConquistaId");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Conteudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ConteudoSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<bool?>("ConteudoRestrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PermitirComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Galeria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Galerias");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Imagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Mapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenarioId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExibirHomepageCenario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ImagemId")
                        .HasColumnType("int");

                    b.Property<string>("Legenda")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("LocalizacaoId")
                        .HasColumnType("int");

                    b.Property<int?>("MateriaId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizacaoId")
                        .HasColumnType("int");

                    b.Property<int?>("Peso")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.Property<bool?>("Publico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CenarioId");

                    b.HasIndex("ImagemId");

                    b.HasIndex("LocalizacaoId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("OrganizacaoId");

                    b.ToTable("Mapas");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Missao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NotasSecretas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolucao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusMissaoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoMissaoId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StatusMissaoId");

                    b.HasIndex("TipoMissaoId");

                    b.ToTable("Missoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Personagem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("Altura")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<string>("Apelido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cabelo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introducao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nascimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomePrimeiro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomeUltimo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotasSecretas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Olhos")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Peso")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<string>("Raca")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tendencia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoWeb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [SecaoWebSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Css")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Sessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DuracaoHoras")
                        .HasColumnType("int");

                    b.Property<int>("EnredoId")
                        .HasColumnType("int");

                    b.Property<int>("GmId")
                        .HasColumnType("int");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool?>("JogoOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Vtt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnredoId");

                    b.HasIndex("GmId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Sessoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.StatusMissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatusMissoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoConquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposConquista");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoMateria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposMateria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoMissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposMissao");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoNpc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposNpc");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("EmailVerificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NomePrimeiro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomeUltimo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("RecebeEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("RecebeEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GrupoNpc", b =>
                {
                    b.Property<int>("GruposId")
                        .HasColumnType("int");

                    b.Property<int>("NPCsId")
                        .HasColumnType("int");

                    b.HasKey("GruposId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("GrupoNpc");
                });

            modelBuilder.Entity("GrupoPc", b =>
                {
                    b.Property<int>("GruposId")
                        .HasColumnType("int");

                    b.Property<int>("PCsId")
                        .HasColumnType("int");

                    b.HasKey("GruposId", "PCsId");

                    b.HasIndex("PCsId");

                    b.ToTable("GrupoPc");
                });

            modelBuilder.Entity("MapaTag", b =>
                {
                    b.Property<int>("MapasId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MapasId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MapaTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MissaoSessao", b =>
                {
                    b.Property<int>("MissoesId")
                        .HasColumnType("int");

                    b.Property<int>("SessoesId")
                        .HasColumnType("int");

                    b.HasKey("MissoesId", "SessoesId");

                    b.HasIndex("SessoesId");

                    b.ToTable("MissaoSessao");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Enredo", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.Conteudo");

                    b.Property<string>("Aliados")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GanchoPersonagens")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introducao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanoFundo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisaoGeral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CampanhaId");

                    b.ToTable("Enredos", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Materia", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.Conteudo");

                    b.Property<bool?>("ExibirAutorTopo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Icone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Peso")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.Property<int?>("SecaoCabecalhoId")
                        .HasColumnType("int");

                    b.Property<int?>("SecaoLateralId")
                        .HasColumnType("int");

                    b.Property<int?>("SecaoRodapeId")
                        .HasColumnType("int");

                    b.Property<int>("TipoMateriaId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.HasIndex("SecaoCabecalhoId");

                    b.HasIndex("SecaoLateralId");

                    b.HasIndex("SecaoRodapeId");

                    b.HasIndex("TipoMateriaId");

                    b.ToTable("Materias", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Npc", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.Personagem");

                    b.Property<int?>("GaleriaId")
                        .HasColumnType("int");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("int");

                    b.Property<int>("TipoNpcId")
                        .HasColumnType("int");

                    b.Property<bool?>("Visivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasIndex("GaleriaId");

                    b.HasIndex("ImagemId");

                    b.ToTable("Npcs", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Pc", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.Personagem");

                    b.Property<string>("Frase")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GaleriaId")
                        .HasColumnType("int");

                    b.Property<string>("Historia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Idade")
                        .HasColumnType("int");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("int");

                    b.Property<int>("JogadorId")
                        .HasColumnType("int");

                    b.Property<string>("Journal")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GaleriaId");

                    b.HasIndex("ImagemId");

                    b.HasIndex("JogadorId");

                    b.ToTable("Pcs", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoCabecalho", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.SecaoWeb");

                    b.Property<string>("Creditos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("int");

                    b.Property<string>("SubCabecalho")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ImagemId");

                    b.ToTable("SecoesCabecalho", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoLateral", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.SecaoWeb");

                    b.Property<string>("Abaixo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainelAbaixo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainelTopo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topo")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SecoesLateral", (string)null);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoRodape", b =>
                {
                    b.HasBaseType("GeradorCenarioMVC.Domain.Entities.SecaoWeb");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GaleriaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NotaAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotaRodape")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GaleriaId");

                    b.ToTable("SecoesRodape", (string)null);
                });

            modelBuilder.Entity("CampanhaGrupo", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Campanha", null)
                        .WithMany()
                        .HasForeignKey("CampanhasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CampanhaNpc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Campanha", null)
                        .WithMany()
                        .HasForeignKey("CampanhasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Npc", null)
                        .WithMany()
                        .HasForeignKey("NpcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CampanhaPc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Campanha", null)
                        .WithMany()
                        .HasForeignKey("CampanhasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Pc", null)
                        .WithMany()
                        .HasForeignKey("PcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoriaMateriaMateria", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.CategoriaMateria", null)
                        .WithMany()
                        .HasForeignKey("CategoriasMateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("MateriasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CenarioCenarioGenero", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.CenarioGenero", null)
                        .WithMany()
                        .HasForeignKey("CenarioGenerosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Cenario", null)
                        .WithMany()
                        .HasForeignKey("CenariosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CenarioMateria", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Cenario", null)
                        .WithMany()
                        .HasForeignKey("CenariosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("MateriasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CenarioTag", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Cenario", null)
                        .WithMany()
                        .HasForeignKey("CenariosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConquistaNpc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Conquista", null)
                        .WithMany()
                        .HasForeignKey("ConquistasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Npc", null)
                        .WithMany()
                        .HasForeignKey("NpcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConquistaPc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Conquista", null)
                        .WithMany()
                        .HasForeignKey("ConquistasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Pc", null)
                        .WithMany()
                        .HasForeignKey("PcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EnredoPc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Enredo", null)
                        .WithMany()
                        .HasForeignKey("EnredosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Pc", null)
                        .WithMany()
                        .HasForeignKey("PcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GaleriaImagem", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Galeria", null)
                        .WithMany()
                        .HasForeignKey("GaleriasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", null)
                        .WithMany()
                        .HasForeignKey("ImagensId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Campanha", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Cenario", "Cenario")
                        .WithMany("Campanhas")
                        .HasForeignKey("CenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", "Imagem")
                        .WithMany("Campanhas")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cenario");

                    b.Navigation("Imagem");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.CategoriaMateria", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.CategoriaMateria", "Parent")
                        .WithMany("SubCategoriasMateria")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Cenario", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Galeria", "Galeria")
                        .WithMany("Cenarios")
                        .HasForeignKey("GaleriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Galeria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Conquista", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.TipoConquista", "TipoConquista")
                        .WithMany("Conquistas")
                        .HasForeignKey("TipoConquistaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoConquista");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Mapa", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Cenario", "Cenario")
                        .WithMany("Mapas")
                        .HasForeignKey("CenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", "Imagem")
                        .WithMany("Mapas")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", "Localizacao")
                        .WithMany("LocalizacaoMapas")
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", "Organizacao")
                        .WithMany("OrganizacaoMapas")
                        .HasForeignKey("OrganizacaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cenario");

                    b.Navigation("Imagem");

                    b.Navigation("Localizacao");

                    b.Navigation("Materia");

                    b.Navigation("Organizacao");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Missao", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.StatusMissao", "StatusMissao")
                        .WithMany("Missoes")
                        .HasForeignKey("StatusMissaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.TipoMissao", "TipoMissao")
                        .WithMany("Missoes")
                        .HasForeignKey("TipoMissaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StatusMissao");

                    b.Navigation("TipoMissao");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Sessao", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Enredo", "Enredo")
                        .WithMany("Sessoes")
                        .HasForeignKey("EnredoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Usuario", "Gm")
                        .WithMany("Sessoes")
                        .HasForeignKey("GmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Grupo", "Grupo")
                        .WithMany("Sessoes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Enredo");

                    b.Navigation("Gm");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("GrupoNpc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Npc", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoPc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Pc", null)
                        .WithMany()
                        .HasForeignKey("PCsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MapaTag", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Mapa", null)
                        .WithMany()
                        .HasForeignKey("MapasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MissaoSessao", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Missao", null)
                        .WithMany()
                        .HasForeignKey("MissoesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Sessao", null)
                        .WithMany()
                        .HasForeignKey("SessoesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Enredo", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Campanha", "Campanha")
                        .WithMany()
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campanha");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Materia", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Materia", "Parent")
                        .WithMany("SubMaterias")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.SecaoCabecalho", "SecaoCabecalho")
                        .WithMany("Materias")
                        .HasForeignKey("SecaoCabecalhoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.SecaoLateral", "SecaoLateral")
                        .WithMany("Materias")
                        .HasForeignKey("SecaoLateralId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.SecaoRodape", "SecaoRodape")
                        .WithMany("Materias")
                        .HasForeignKey("SecaoRodapeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.TipoMateria", "TipoMateria")
                        .WithMany("Materias")
                        .HasForeignKey("TipoMateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("SecaoCabecalho");

                    b.Navigation("SecaoLateral");

                    b.Navigation("SecaoRodape");

                    b.Navigation("TipoMateria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Npc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Galeria", null)
                        .WithMany("Npcs")
                        .HasForeignKey("GaleriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.TipoNpc", "TipoNpc")
                        .WithMany("Npcs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", null)
                        .WithMany("Npcs")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TipoNpc");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Pc", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Galeria", "Galeria")
                        .WithMany("Pcs")
                        .HasForeignKey("GaleriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", "Imagem")
                        .WithMany("Pcs")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Usuario", "Jogador")
                        .WithMany("Pcs")
                        .HasForeignKey("JogadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Galeria");

                    b.Navigation("Imagem");

                    b.Navigation("Jogador");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoCabecalho", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Imagem", null)
                        .WithMany("SecoesCabecalho")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoRodape", b =>
                {
                    b.HasOne("GeradorCenarioMVC.Domain.Entities.Galeria", "Galeria")
                        .WithMany("SecoesRodape")
                        .HasForeignKey("GaleriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Galeria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.CategoriaMateria", b =>
                {
                    b.Navigation("SubCategoriasMateria");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Cenario", b =>
                {
                    b.Navigation("Campanhas");

                    b.Navigation("Mapas");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Galeria", b =>
                {
                    b.Navigation("Cenarios");

                    b.Navigation("Npcs");

                    b.Navigation("Pcs");

                    b.Navigation("SecoesRodape");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Grupo", b =>
                {
                    b.Navigation("Sessoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Imagem", b =>
                {
                    b.Navigation("Campanhas");

                    b.Navigation("Mapas");

                    b.Navigation("Npcs");

                    b.Navigation("Pcs");

                    b.Navigation("SecoesCabecalho");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.StatusMissao", b =>
                {
                    b.Navigation("Missoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoConquista", b =>
                {
                    b.Navigation("Conquistas");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoMateria", b =>
                {
                    b.Navigation("Materias");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoMissao", b =>
                {
                    b.Navigation("Missoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.TipoNpc", b =>
                {
                    b.Navigation("Npcs");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Pcs");

                    b.Navigation("Sessoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Enredo", b =>
                {
                    b.Navigation("Sessoes");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.Materia", b =>
                {
                    b.Navigation("LocalizacaoMapas");

                    b.Navigation("OrganizacaoMapas");

                    b.Navigation("SubMaterias");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoCabecalho", b =>
                {
                    b.Navigation("Materias");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoLateral", b =>
                {
                    b.Navigation("Materias");
                });

            modelBuilder.Entity("GeradorCenarioMVC.Domain.Entities.SecaoRodape", b =>
                {
                    b.Navigation("Materias");
                });
#pragma warning restore 612, 618
        }
    }
}
